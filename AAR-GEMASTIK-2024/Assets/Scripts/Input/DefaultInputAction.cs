//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/DefaultInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""b3487e32-bd45-4a41-9d53-13d2200e8caf"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c0d25dfb-1f8e-4137-bfef-1e39711ac634"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InvokeWeaponUsage"",
                    ""type"": ""Button"",
                    ""id"": ""2a0a042f-7b4d-49b2-89d4-dce7ff077278"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeAbilityUsage"",
                    ""type"": ""Button"",
                    ""id"": ""5657b4aa-dfe4-4e12-8636-b1c78c20fd5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeInterract"",
                    ""type"": ""Button"",
                    ""id"": ""e70be2cb-4a29-4746-95ae-2d38ee6e8b2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeFlashlight"",
                    ""type"": ""Button"",
                    ""id"": ""187f66d1-d6d3-4e25-a275-0ad01e7b180f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeSwitchItemFocus"",
                    ""type"": ""Button"",
                    ""id"": ""8890a046-9c1a-41c6-b6af-a2b56e2b5bd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeUseItem"",
                    ""type"": ""Button"",
                    ""id"": ""6c3e5977-35fd-4fab-b21a-08fd9d03c585"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""0717b678-3eba-4d2b-b992-96c701dd38eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""88d211bc-1055-4801-b6c2-85755272b47b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2c458a0b-5c8a-4478-868c-029db2e85a08"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ddbf3888-e0a6-4014-9efe-ec6a53a442d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""13108232-e84c-4182-9173-2ee4c5f1eeb8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e81f2872-5576-4335-bdca-080e0e028e15"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a7a2648-7d4b-4916-86ba-3254c86d179a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""76bda962-9fdd-4160-8f43-1bdcdc55d9cd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e8f0f866-d78c-4a66-a655-070d3f16eed6"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""39ebff01-e910-4523-a908-f51bf775d73c"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7cf1f27a-9a73-48a0-ad9a-945bfa5626e1"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3a528227-2dd1-415f-9d48-9800e1ebd0b6"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f170d91f-4b1f-4501-95cd-114f8b6d8ef0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""InvokeWeaponUsage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59c8d5e0-e45d-4b58-9eb2-a59ec3fe8146"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""InvokeAbilityUsage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1cf9643-4c55-423f-8d9b-e5d8cf4d10ee"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""InvokeInterract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6db98813-6e9d-470f-9ace-4b93576c561c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""InvokeFlashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3eb6e01-e4c4-49a8-8115-e98091bd3cd4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""InvokeSwitchItemFocus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e24aa330-e6e1-46ee-84dd-f677c802d60d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""InvokeUseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b43218bc-6c30-42d9-aa2a-84c72a07474a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""3d6e58fb-3113-4039-a783-31514b7dc133"",
            ""actions"": [
                {
                    ""name"": ""Resume From Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e83b8c7c-8bf6-457a-8c80-096a3dea5e5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17565fde-7d04-4b07-baca-7b1ede03046a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Resume From Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Credits"",
            ""id"": ""6e3fcae9-0f77-4d7c-8656-e3aabebb3a5a"",
            ""actions"": [
                {
                    ""name"": ""Next Page"",
                    ""type"": ""Button"",
                    ""id"": ""e3613c05-ae6c-4c37-adf8-c169e565940b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous page"",
                    ""type"": ""Button"",
                    ""id"": ""3c2a7bea-d7c2-4d45-a2d9-1ad74644abec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""94a1945d-74e7-4ce0-af27-e782e9ad5b93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""282729dd-9a3d-41d2-b144-5985bc6b8929"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4eb1b7eb-fa53-453e-8233-cd1cf6aa693c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3888b0da-bc2a-491f-8cf0-85366807d204"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9c1381d-e68c-4f1f-a84d-8804604e8185"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Previous page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0012cc5-c4ba-47ab-8ee8-89e55e128b51"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Previous page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06277752-7e6c-4733-923b-a20a35e9e599"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Previous page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc0a33a6-fa18-4d0a-afaa-4b0564ddce34"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultControl"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c483323-72ea-4c3a-99de-af68d4bed9a3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db1cbda1-fdc2-4e2c-8a94-1d4220d24221"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad  Controller"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause_UI"",
            ""id"": ""b1b79059-8966-4bb5-ab41-c2e8aad3b16e"",
            ""actions"": [
                {
                    ""name"": ""Navigation"",
                    ""type"": ""Button"",
                    ""id"": ""c9f28ac7-87c8-48eb-9a93-5f9ee1bb9d29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""65015726-2c12-4d01-a1f2-927e3b85e60c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Negate"",
                    ""type"": ""Button"",
                    ""id"": ""41429bcb-4bae-4f3c-920a-99ae8d375a21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d00a169-1b8c-487e-b7a6-2633ccc6d355"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Negate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d7f87fde-ad39-48f9-bc9b-59aff8a6deb7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb38a849-9833-433d-a524-d197edaf0e45"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b3f51e55-1c74-4a00-9725-a9df14ac1471"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6fb70b9f-da1b-468a-960a-e5191115050d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""69a2162e-ba1d-471b-8d23-a63717b72b7f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""02c06de7-1fae-4028-8e65-153d9f5107ce"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""10227cee-975f-4f00-98b3-c3fd651e7a70"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35c424ec-623c-4546-8e76-d6cb7f154982"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultControl"",
            ""bindingGroup"": ""DefaultControl"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad  Controller"",
            ""bindingGroup"": ""Gamepad  Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_InvokeWeaponUsage = m_Player.FindAction("InvokeWeaponUsage", throwIfNotFound: true);
        m_Player_InvokeAbilityUsage = m_Player.FindAction("InvokeAbilityUsage", throwIfNotFound: true);
        m_Player_InvokeInterract = m_Player.FindAction("InvokeInterract", throwIfNotFound: true);
        m_Player_InvokeFlashlight = m_Player.FindAction("InvokeFlashlight", throwIfNotFound: true);
        m_Player_InvokeSwitchItemFocus = m_Player.FindAction("InvokeSwitchItemFocus", throwIfNotFound: true);
        m_Player_InvokeUseItem = m_Player.FindAction("InvokeUseItem", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_ResumeFromPause = m_UI.FindAction("Resume From Pause", throwIfNotFound: true);
        // Credits
        m_Credits = asset.FindActionMap("Credits", throwIfNotFound: true);
        m_Credits_NextPage = m_Credits.FindAction("Next Page", throwIfNotFound: true);
        m_Credits_Previouspage = m_Credits.FindAction("Previous page", throwIfNotFound: true);
        m_Credits_Escape = m_Credits.FindAction("Escape", throwIfNotFound: true);
        // Pause_UI
        m_Pause_UI = asset.FindActionMap("Pause_UI", throwIfNotFound: true);
        m_Pause_UI_Navigation = m_Pause_UI.FindAction("Navigation", throwIfNotFound: true);
        m_Pause_UI_Confirm = m_Pause_UI.FindAction("Confirm", throwIfNotFound: true);
        m_Pause_UI_Negate = m_Pause_UI.FindAction("Negate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_InvokeWeaponUsage;
    private readonly InputAction m_Player_InvokeAbilityUsage;
    private readonly InputAction m_Player_InvokeInterract;
    private readonly InputAction m_Player_InvokeFlashlight;
    private readonly InputAction m_Player_InvokeSwitchItemFocus;
    private readonly InputAction m_Player_InvokeUseItem;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @DefaultInputAction m_Wrapper;
        public PlayerActions(@DefaultInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @InvokeWeaponUsage => m_Wrapper.m_Player_InvokeWeaponUsage;
        public InputAction @InvokeAbilityUsage => m_Wrapper.m_Player_InvokeAbilityUsage;
        public InputAction @InvokeInterract => m_Wrapper.m_Player_InvokeInterract;
        public InputAction @InvokeFlashlight => m_Wrapper.m_Player_InvokeFlashlight;
        public InputAction @InvokeSwitchItemFocus => m_Wrapper.m_Player_InvokeSwitchItemFocus;
        public InputAction @InvokeUseItem => m_Wrapper.m_Player_InvokeUseItem;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @InvokeWeaponUsage.started += instance.OnInvokeWeaponUsage;
            @InvokeWeaponUsage.performed += instance.OnInvokeWeaponUsage;
            @InvokeWeaponUsage.canceled += instance.OnInvokeWeaponUsage;
            @InvokeAbilityUsage.started += instance.OnInvokeAbilityUsage;
            @InvokeAbilityUsage.performed += instance.OnInvokeAbilityUsage;
            @InvokeAbilityUsage.canceled += instance.OnInvokeAbilityUsage;
            @InvokeInterract.started += instance.OnInvokeInterract;
            @InvokeInterract.performed += instance.OnInvokeInterract;
            @InvokeInterract.canceled += instance.OnInvokeInterract;
            @InvokeFlashlight.started += instance.OnInvokeFlashlight;
            @InvokeFlashlight.performed += instance.OnInvokeFlashlight;
            @InvokeFlashlight.canceled += instance.OnInvokeFlashlight;
            @InvokeSwitchItemFocus.started += instance.OnInvokeSwitchItemFocus;
            @InvokeSwitchItemFocus.performed += instance.OnInvokeSwitchItemFocus;
            @InvokeSwitchItemFocus.canceled += instance.OnInvokeSwitchItemFocus;
            @InvokeUseItem.started += instance.OnInvokeUseItem;
            @InvokeUseItem.performed += instance.OnInvokeUseItem;
            @InvokeUseItem.canceled += instance.OnInvokeUseItem;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @InvokeWeaponUsage.started -= instance.OnInvokeWeaponUsage;
            @InvokeWeaponUsage.performed -= instance.OnInvokeWeaponUsage;
            @InvokeWeaponUsage.canceled -= instance.OnInvokeWeaponUsage;
            @InvokeAbilityUsage.started -= instance.OnInvokeAbilityUsage;
            @InvokeAbilityUsage.performed -= instance.OnInvokeAbilityUsage;
            @InvokeAbilityUsage.canceled -= instance.OnInvokeAbilityUsage;
            @InvokeInterract.started -= instance.OnInvokeInterract;
            @InvokeInterract.performed -= instance.OnInvokeInterract;
            @InvokeInterract.canceled -= instance.OnInvokeInterract;
            @InvokeFlashlight.started -= instance.OnInvokeFlashlight;
            @InvokeFlashlight.performed -= instance.OnInvokeFlashlight;
            @InvokeFlashlight.canceled -= instance.OnInvokeFlashlight;
            @InvokeSwitchItemFocus.started -= instance.OnInvokeSwitchItemFocus;
            @InvokeSwitchItemFocus.performed -= instance.OnInvokeSwitchItemFocus;
            @InvokeSwitchItemFocus.canceled -= instance.OnInvokeSwitchItemFocus;
            @InvokeUseItem.started -= instance.OnInvokeUseItem;
            @InvokeUseItem.performed -= instance.OnInvokeUseItem;
            @InvokeUseItem.canceled -= instance.OnInvokeUseItem;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_ResumeFromPause;
    public struct UIActions
    {
        private @DefaultInputAction m_Wrapper;
        public UIActions(@DefaultInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @ResumeFromPause => m_Wrapper.m_UI_ResumeFromPause;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @ResumeFromPause.started += instance.OnResumeFromPause;
            @ResumeFromPause.performed += instance.OnResumeFromPause;
            @ResumeFromPause.canceled += instance.OnResumeFromPause;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @ResumeFromPause.started -= instance.OnResumeFromPause;
            @ResumeFromPause.performed -= instance.OnResumeFromPause;
            @ResumeFromPause.canceled -= instance.OnResumeFromPause;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Credits
    private readonly InputActionMap m_Credits;
    private List<ICreditsActions> m_CreditsActionsCallbackInterfaces = new List<ICreditsActions>();
    private readonly InputAction m_Credits_NextPage;
    private readonly InputAction m_Credits_Previouspage;
    private readonly InputAction m_Credits_Escape;
    public struct CreditsActions
    {
        private @DefaultInputAction m_Wrapper;
        public CreditsActions(@DefaultInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextPage => m_Wrapper.m_Credits_NextPage;
        public InputAction @Previouspage => m_Wrapper.m_Credits_Previouspage;
        public InputAction @Escape => m_Wrapper.m_Credits_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Credits; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreditsActions set) { return set.Get(); }
        public void AddCallbacks(ICreditsActions instance)
        {
            if (instance == null || m_Wrapper.m_CreditsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreditsActionsCallbackInterfaces.Add(instance);
            @NextPage.started += instance.OnNextPage;
            @NextPage.performed += instance.OnNextPage;
            @NextPage.canceled += instance.OnNextPage;
            @Previouspage.started += instance.OnPreviouspage;
            @Previouspage.performed += instance.OnPreviouspage;
            @Previouspage.canceled += instance.OnPreviouspage;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(ICreditsActions instance)
        {
            @NextPage.started -= instance.OnNextPage;
            @NextPage.performed -= instance.OnNextPage;
            @NextPage.canceled -= instance.OnNextPage;
            @Previouspage.started -= instance.OnPreviouspage;
            @Previouspage.performed -= instance.OnPreviouspage;
            @Previouspage.canceled -= instance.OnPreviouspage;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(ICreditsActions instance)
        {
            if (m_Wrapper.m_CreditsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreditsActions instance)
        {
            foreach (var item in m_Wrapper.m_CreditsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreditsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreditsActions @Credits => new CreditsActions(this);

    // Pause_UI
    private readonly InputActionMap m_Pause_UI;
    private List<IPause_UIActions> m_Pause_UIActionsCallbackInterfaces = new List<IPause_UIActions>();
    private readonly InputAction m_Pause_UI_Navigation;
    private readonly InputAction m_Pause_UI_Confirm;
    private readonly InputAction m_Pause_UI_Negate;
    public struct Pause_UIActions
    {
        private @DefaultInputAction m_Wrapper;
        public Pause_UIActions(@DefaultInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigation => m_Wrapper.m_Pause_UI_Navigation;
        public InputAction @Confirm => m_Wrapper.m_Pause_UI_Confirm;
        public InputAction @Negate => m_Wrapper.m_Pause_UI_Negate;
        public InputActionMap Get() { return m_Wrapper.m_Pause_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Pause_UIActions set) { return set.Get(); }
        public void AddCallbacks(IPause_UIActions instance)
        {
            if (instance == null || m_Wrapper.m_Pause_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Pause_UIActionsCallbackInterfaces.Add(instance);
            @Navigation.started += instance.OnNavigation;
            @Navigation.performed += instance.OnNavigation;
            @Navigation.canceled += instance.OnNavigation;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Negate.started += instance.OnNegate;
            @Negate.performed += instance.OnNegate;
            @Negate.canceled += instance.OnNegate;
        }

        private void UnregisterCallbacks(IPause_UIActions instance)
        {
            @Navigation.started -= instance.OnNavigation;
            @Navigation.performed -= instance.OnNavigation;
            @Navigation.canceled -= instance.OnNavigation;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Negate.started -= instance.OnNegate;
            @Negate.performed -= instance.OnNegate;
            @Negate.canceled -= instance.OnNegate;
        }

        public void RemoveCallbacks(IPause_UIActions instance)
        {
            if (m_Wrapper.m_Pause_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPause_UIActions instance)
        {
            foreach (var item in m_Wrapper.m_Pause_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Pause_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Pause_UIActions @Pause_UI => new Pause_UIActions(this);
    private int m_DefaultControlSchemeIndex = -1;
    public InputControlScheme DefaultControlScheme
    {
        get
        {
            if (m_DefaultControlSchemeIndex == -1) m_DefaultControlSchemeIndex = asset.FindControlSchemeIndex("DefaultControl");
            return asset.controlSchemes[m_DefaultControlSchemeIndex];
        }
    }
    private int m_GamepadControllerSchemeIndex = -1;
    public InputControlScheme GamepadControllerScheme
    {
        get
        {
            if (m_GamepadControllerSchemeIndex == -1) m_GamepadControllerSchemeIndex = asset.FindControlSchemeIndex("Gamepad  Controller");
            return asset.controlSchemes[m_GamepadControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInvokeWeaponUsage(InputAction.CallbackContext context);
        void OnInvokeAbilityUsage(InputAction.CallbackContext context);
        void OnInvokeInterract(InputAction.CallbackContext context);
        void OnInvokeFlashlight(InputAction.CallbackContext context);
        void OnInvokeSwitchItemFocus(InputAction.CallbackContext context);
        void OnInvokeUseItem(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnResumeFromPause(InputAction.CallbackContext context);
    }
    public interface ICreditsActions
    {
        void OnNextPage(InputAction.CallbackContext context);
        void OnPreviouspage(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IPause_UIActions
    {
        void OnNavigation(InputAction.CallbackContext context);
        void OnConfirm(InputAction.CallbackContext context);
        void OnNegate(InputAction.CallbackContext context);
    }
}
